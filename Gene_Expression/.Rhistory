network_hnrnpk <- read.delim("~/Downloads/domain_centric_networks/hepg2/network_hnrnpk.txt")
View(network_hnrnpk)
net1 <- network_hnrnpk
rm(network_hnrnpk)
combined_networks_hnrnpk <- read.delim("~/Downloads/combined_networks_comb/combined_networks_hnrnpk.txt")
View(combined_networks_hnrnpk)
net2 <- combined_networks_hnrnpk
rm(combined_networks_hnrnpk)
View(net1)
View(net2)
temp1 <- net1[, c(1:2, 4:6)]
temp2 <- net2[, c(1:2, 4:6)]
View(temp1)
View(temp2)
write.table(x = temp1, file = "/home/enio/Downloads/hnrnpk_prev.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = temp2, file = "/home/enio/Downloads/hnrnpk_curr.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
setwd("/home/enio/Documents/GitHub/hbigs_course_2022/part4_Integration/2_Integratve_Analysis/")
library("readr")
library("vsn")
library("dplyr")
library("limma")
library("ggplot2")
library("ggrepel")
library("BioNet")
library("igraph")
library("OmnipathR")
library("ggpubr")
library("mixOmics")
library("M2SMF")
library("SNFtool")
library("NEMO")
library("fgsea")
library("GSA")
library("VennDiagram")
library("RColorBrewer")
library("ggVennDiagram")
library("pheatmap")
library("tidyverse")
library("factoextra")
library("gridExtra")
library("cluster")
library("NNLM")
library("bayesCC")
# Differential Gene Expression Data
load(file = "../Data/ttop_dge.RData")
# Differential Gene Expression Data
load(file = "../Data/ttop_dge.RData")
head(ttop_dge[, 1:(ncol(ttop_dge)-1)])
# Differential Protein Abundance
load(file = "../Data/ttop_prot.RData")
head(ttop_prot)
# Processed Gene Expression Data across EGF and PBS samples at time-point 60min
load(file = "../Data/proc_gene_data.RData")
head(proc_gene_data)
# Processed Protein Abundance Data across EGF and PBS samples at time-point 60min
load(file = "../Data/proc_prot_data.RData")
head(proc_prot_data)
# We find common Genes and and filter each data
common_genes <- intersect(x = ttop_dge$external_gene_name, y = ttop_prot$Gene)
dge <- ttop_dge[which(ttop_dge$external_gene_name%in%common_genes), ]
prot <- ttop_prot[which(ttop_prot$Gene%in%common_genes), ]
# We create the data-frame for plotting the correlation
data <- matrix(data = , nrow = length(common_genes), ncol = 2)
rownames(data) <- common_genes[order(common_genes)]
colnames(data) <- c("diff_genes", "diff_prot")
data[, 1] <- dge$logFC[order(dge$external_gene_name)]
data[, 2] <- prot$EGF_60_vs_PBS_60_diff[order(prot$Gene)]
data <- as.data.frame(data)
head(data)
# We do ascatter plot of gene expression and protein abundance and estimate the
# Pearson correlation between them
sp <- ggscatter(data, x = "diff_genes", y = "diff_prot", #mention data and axis
add = "reg.line",  # Add regression line
add.params = list(color = "red", fill = "lightgray"), # Customize regression line
conf.int = TRUE # Add confidence interval
)+ stat_cor(method = "pearson", label.x = 3, label.y = 30)# Add correlation coefficient
sp
rm(list = ls())
getwd()
setwd("/home/enio/Documents/GitHub/hbigs_course_2022/part1_RNAseq/dge/")
setwd("/home/enio/Documents/GitHub/hbigs_course_2022/part1_RNAseq/")
setwd("/home/enio/Documents/GitHub/hbigs_course_2022/part1_RNAseq/dge/")
setwd("/home/enio/Documents/GitHub/hbigs_course_2022/part4_Integration/")
list.files()
setwd("/home/enio/Downloads/LINDA_Example-main/")
setwd("/home/enio/Downloads/LINDA_Example-main/Gene_Expression/")
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
source("estimate_significance.R")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org")
ensg2symbol=getBM(attributes=c("ensembl_gene_id","external_gene_name"), mart=mart)
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz")
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = destfile = paste0(getwd(), "/temp_kd_", ii, ".txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd_", ii, ".txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd.txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88002/matrix/GSE88002_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_ctrl.txt"))
temp_kd <- read.table(file = paste0("temp_kd.txt"), sep = " ")
temp_ctrl <- read.table(file = paste0("temp_ctrl.txt"), sep = " ")
# Download KO
experiments <- temp_kd$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_kd$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
experiments
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("ko.tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Download Ctrl
experiments <- temp_ctrl$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_ctrl$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
rm(list = ls())
#! /usr/bin/env Rscript
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
source("estimate_significance.R")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org")
ensg2symbol=getBM(attributes=c("ensembl_gene_id","external_gene_name"), mart=mart)
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd.txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88002/matrix/GSE88002_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_ctrl.txt"))
temp_kd <- read.table(file = paste0("temp_kd.txt"), sep = " ")
temp_ctrl <- read.table(file = paste0("temp_ctrl.txt"), sep = " ")
# Download KD
experiments <- temp_kd$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_kd$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("kd", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Download Ctrl
experiments <- temp_ctrl$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_ctrl$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("ctrl", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Build FPKM data matrix
kd1 <- read.table(file = paste0("kd1.tsv"), header = TRUE)
kd2 <- read.table(file = paste0("kd2.tsv"), header = TRUE)
ctrl1 <- read.table(file = paste0("ctrl1.tsv"), header = TRUE)
ctrl2 <- read.table(file = paste0("ctrl2.tsv"), header = TRUE)
commonGenes <- intersect(x = intersect(x = ko1$gene_id, y = ko2$gene_id),
y = intersect(x = ctrl1$gene_id, y = ctrl2$gene_id))
commonGenes <- intersect(x = intersect(x = kd1$gene_id, y = kd2$gene_id),
y = intersect(x = ctrl1$gene_id, y = ctrl2$gene_id))
commonGenes
length(commonGenes)>0
kd1 <- kd1[which(kd1$gene_id%in%commonGenes), ]
kd2 <- kd2[which(kd2$gene_id%in%commonGenes), ]
ctrl1 <- ctrl1[which(ctrl1$gene_id%in%commonGenes), ]
ctrl2 <- ctrl2[which(ctrl2$gene_id%in%commonGenes), ]
kd1 <- kd1[order(kd1$gene_id), ]
kd2 <- kd2[order(kd2$gene_id), ]
ctrl1 <- ctrl1[order(ctrl1$gene_id), ]
ctrl2 <- ctrl2[order(ctrl2$gene_id), ]
idx2rem <- which(duplicated(kd1$gene_id)); if(length(idx2rem)>0){kd1 <- kd1[-idx2rem, ]}
idx2rem <- which(duplicated(kd2$gene_id)); if(length(idx2rem)>0){kd2 <- kd2[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl1$gene_id)); if(length(idx2rem)>0){ctrl1 <- ctrl1[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl2$gene_id)); if(length(idx2rem)>0){ctrl2 <- ctrl2[-idx2rem, ]}
df <- matrix(data = , nrow = nrow(kd1), ncol = 4)
df[, 1] <- kd1$FPKM
df[, 2] <- kd2$FPKM
df[, 3] <- ctrl1$FPKM
df[, 4] <- ctrl2$FPKM
df <- as.data.frame(df)
rownames(df) <- sapply(strsplit(x = kd1$gene_id, split = ".", fixed = TRUE), '[', 1)
colnames(df) <- c(paste0("ko_", 1:2), paste0("ctrl_", 1:2))
uGenes <- unique(ensg2symbol$external_gene_name)
dfMapped <- matrix(data = , nrow = length(uGenes), ncol = ncol(df))
for(ll in 1:length(uGenes)){
ensg <- ensg2symbol$ensembl_gene_id[which(ensg2symbol$external_gene_name==uGenes[ll])]
for(mm in 1:ncol(df)){
dfMapped[ll, mm] <- median(x = df[which(rownames(df)%in%ensg), mm], na.rm = TRUE)
}
}
rownames(dfMapped) <- uGenes
colnames(dfMapped) <- colnames(df)
dfMapped <- dfMapped[complete.cases(dfMapped), ]
dir.create("output")
# Do differential gene expression analysis
conditions<-factor(c("kd", "kd", "ctrl", "ctrl"))
design <- model.matrix(~ conditions)
y <- DGEList(counts=dfMapped, group=conditions)
keep <- filterByExpr(y, group=conditions)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateGLMCommonDisp(y, design, verbose=TRUE)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmQLFit(y,design,robust=TRUE)
res=glmQLFTest(fit, coef=2)
ttop=as.data.frame(topTags(res,n=nrow(df)))
ttop$ID <- rownames(ttop)
View(ttop)
save(ttop, file = paste0("output/ttop_u2af1_hepg2.RData"))
list.files()
file.remove(paste0("kd1.tsv"))
file.remove(paste0("kd2.tsv"))
file.remove(paste0("ctrl1.tsv"))
file.remove(paste0("ctrl2.tsv"))
file.remove(paste0("temp_kd.txt"))
file.remove(paste0("temp_ctrl.txt"))
list.files()
head(y$counts)
rm(list = ls())
#! /usr/bin/env Rscript
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
dir.create("output")
source("estimate_significance.R")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org")
ensg2symbol=getBM(attributes=c("ensembl_gene_id","external_gene_name"), mart=mart)
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd.txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88002/matrix/GSE88002_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_ctrl.txt"))
temp_kd <- read.table(file = paste0("temp_kd.txt"), sep = " ")
temp_ctrl <- read.table(file = paste0("temp_ctrl.txt"), sep = " ")
# Download KD
experiments <- temp_kd$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_kd$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("kd", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Download Ctrl
experiments <- temp_ctrl$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_ctrl$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("ctrl", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Build FPKM data matrix
kd1 <- read.table(file = paste0("kd1.tsv"), header = TRUE)
kd2 <- read.table(file = paste0("kd2.tsv"), header = TRUE)
ctrl1 <- read.table(file = paste0("ctrl1.tsv"), header = TRUE)
ctrl2 <- read.table(file = paste0("ctrl2.tsv"), header = TRUE)
commonGenes <- intersect(x = intersect(x = kd1$gene_id, y = kd2$gene_id),
y = intersect(x = ctrl1$gene_id, y = ctrl2$gene_id))
kd1 <- kd1[which(kd1$gene_id%in%commonGenes), ]
kd2 <- kd2[which(kd2$gene_id%in%commonGenes), ]
ctrl1 <- ctrl1[which(ctrl1$gene_id%in%commonGenes), ]
ctrl2 <- ctrl2[which(ctrl2$gene_id%in%commonGenes), ]
kd1 <- kd1[order(kd1$gene_id), ]
kd2 <- kd2[order(kd2$gene_id), ]
ctrl1 <- ctrl1[order(ctrl1$gene_id), ]
ctrl2 <- ctrl2[order(ctrl2$gene_id), ]
idx2rem <- which(duplicated(kd1$gene_id)); if(length(idx2rem)>0){kd1 <- kd1[-idx2rem, ]}
idx2rem <- which(duplicated(kd2$gene_id)); if(length(idx2rem)>0){kd2 <- kd2[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl1$gene_id)); if(length(idx2rem)>0){ctrl1 <- ctrl1[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl2$gene_id)); if(length(idx2rem)>0){ctrl2 <- ctrl2[-idx2rem, ]}
df <- matrix(data = , nrow = nrow(kd1), ncol = 4)
df[, 1] <- kd1$FPKM
df[, 2] <- kd2$FPKM
df[, 3] <- ctrl1$FPKM
df[, 4] <- ctrl2$FPKM
df <- as.data.frame(df)
rownames(df) <- sapply(strsplit(x = kd1$gene_id, split = ".", fixed = TRUE), '[', 1)
colnames(df) <- c(paste0("kd_", 1:2), paste0("ctrl_", 1:2))
uGenes <- unique(ensg2symbol$external_gene_name)
dfMapped <- matrix(data = , nrow = length(uGenes), ncol = ncol(df))
for(ll in 1:length(uGenes)){
ensg <- ensg2symbol$ensembl_gene_id[which(ensg2symbol$external_gene_name==uGenes[ll])]
for(mm in 1:ncol(df)){
dfMapped[ll, mm] <- median(x = df[which(rownames(df)%in%ensg), mm], na.rm = TRUE)
}
}
rownames(dfMapped) <- uGenes
colnames(dfMapped) <- colnames(df)
dfMapped <- dfMapped[complete.cases(dfMapped), ]
# Do differential gene expression analysis
conditions<-factor(c("kd", "kd", "ctrl", "ctrl"))
design <- model.matrix(~ conditions)
y <- DGEList(counts=dfMapped, group=conditions)
keep <- filterByExpr(y, group=conditions)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateGLMCommonDisp(y, design, verbose=TRUE)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmQLFit(y,design,robust=TRUE)
res=glmQLFTest(fit, coef=2)
ttop=as.data.frame(topTags(res,n=nrow(df)))
ttop$ID <- rownames(ttop)
save(ttop, file = paste0("output/ttop_u2af1_hepg2.RData"))
file.remove(paste0("kd1.tsv"))
file.remove(paste0("kd2.tsv"))
file.remove(paste0("ctrl1.tsv"))
file.remove(paste0("ctrl2.tsv"))
file.remove(paste0("temp_kd.txt"))
file.remove(paste0("temp_ctrl.txt"))
rm(list = ls())
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
dir.create("output")
source("estimate_significance.R")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org")
ensg2symbol=getBM(attributes=c("ensembl_gene_id","external_gene_name"), mart=mart)
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd.txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88002/matrix/GSE88002_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_ctrl.txt"))
temp_kd <- read.table(file = paste0("temp_kd.txt"), sep = " ")
temp_ctrl <- read.table(file = paste0("temp_ctrl.txt"), sep = " ")
# Download KD
experiments <- temp_kd$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_kd$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("kd", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Download Ctrl
experiments <- temp_ctrl$V1[which(grepl(pattern = "gene_quantifications_GRCh38.tsv.gz", x = temp_ctrl$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "gene_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("ctrl", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Build FPKM data matrix
kd1 <- read.table(file = paste0("kd1.tsv"), header = TRUE)
kd2 <- read.table(file = paste0("kd2.tsv"), header = TRUE)
ctrl1 <- read.table(file = paste0("ctrl1.tsv"), header = TRUE)
ctrl2 <- read.table(file = paste0("ctrl2.tsv"), header = TRUE)
commonGenes <- intersect(x = intersect(x = kd1$gene_id, y = kd2$gene_id),
y = intersect(x = ctrl1$gene_id, y = ctrl2$gene_id))
kd1 <- kd1[which(kd1$gene_id%in%commonGenes), ]
kd2 <- kd2[which(kd2$gene_id%in%commonGenes), ]
ctrl1 <- ctrl1[which(ctrl1$gene_id%in%commonGenes), ]
ctrl2 <- ctrl2[which(ctrl2$gene_id%in%commonGenes), ]
kd1 <- kd1[order(kd1$gene_id), ]
kd2 <- kd2[order(kd2$gene_id), ]
ctrl1 <- ctrl1[order(ctrl1$gene_id), ]
ctrl2 <- ctrl2[order(ctrl2$gene_id), ]
idx2rem <- which(duplicated(kd1$gene_id)); if(length(idx2rem)>0){kd1 <- kd1[-idx2rem, ]}
idx2rem <- which(duplicated(kd2$gene_id)); if(length(idx2rem)>0){kd2 <- kd2[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl1$gene_id)); if(length(idx2rem)>0){ctrl1 <- ctrl1[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl2$gene_id)); if(length(idx2rem)>0){ctrl2 <- ctrl2[-idx2rem, ]}
df <- matrix(data = , nrow = nrow(kd1), ncol = 4)
df[, 1] <- kd1$FPKM
df[, 2] <- kd2$FPKM
df[, 3] <- ctrl1$FPKM
df[, 4] <- ctrl2$FPKM
df <- as.data.frame(df)
rownames(df) <- sapply(strsplit(x = kd1$gene_id, split = ".", fixed = TRUE), '[', 1)
colnames(df) <- c(paste0("kd_", 1:2), paste0("ctrl_", 1:2))
uGenes <- unique(ensg2symbol$external_gene_name)
dfMapped <- matrix(data = , nrow = length(uGenes), ncol = ncol(df))
for(ll in 1:length(uGenes)){
ensg <- ensg2symbol$ensembl_gene_id[which(ensg2symbol$external_gene_name==uGenes[ll])]
for(mm in 1:ncol(df)){
dfMapped[ll, mm] <- median(x = df[which(rownames(df)%in%ensg), mm], na.rm = TRUE)
}
}
rownames(dfMapped) <- uGenes
colnames(dfMapped) <- colnames(df)
dfMapped <- dfMapped[complete.cases(dfMapped), ]
# Do differential gene expression analysis
conditions<-factor(c("kd", "kd", "ctrl", "ctrl"))
design <- model.matrix(~ conditions)
y <- DGEList(counts=dfMapped, group=conditions)
keep <- filterByExpr(y, group=conditions)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateGLMCommonDisp(y, design, verbose=TRUE)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmQLFit(y,design,robust=TRUE)
res=glmQLFTest(fit, coef=2)
ttop=as.data.frame(topTags(res,n=nrow(df)))
ttop$ID <- rownames(ttop)
save(ttop, file = paste0("output/ttop_u2af1_hepg2.RData"))
file.remove(paste0("kd1.tsv"))
file.remove(paste0("kd2.tsv"))
file.remove(paste0("ctrl1.tsv"))
file.remove(paste0("ctrl2.tsv"))
file.remove(paste0("temp_kd.txt"))
file.remove(paste0("temp_ctrl.txt"))
library(OmnipathR)
