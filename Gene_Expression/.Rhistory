if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DRIMSeq")
library(DRIMSeq)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PasillaTranscriptExpr")
library("PasillaTranscriptExpr")
data_dir <- system.file("extdata", package = "PasillaTranscriptExpr")
pasilla_metadata <- read.table(file.path(data_dir, "metadata.txt"),
header = TRUE, as.is = TRUE)
View(pasilla_metadata)
pasilla_counts <- read.table(file.path(data_dir, "counts.txt"),
header = TRUE, as.is = TRUE)
library(DRIMSeq)
pasilla_samples <- data.frame(sample_id = pasilla_metadata$SampleName,
group = pasilla_metadata$condition)
levels(pasilla_samples$group)
d <- dmDSdata(counts = pasilla_counts, samples = pasilla_samples)
d
head(counts(d), 3)
head(samples(d), 3)
plotData(d)
gene_id_subset <- readLines(file.path(data_dir, "gene_id_subset.txt"))
d <- d[names(d) %in% gene_id_subset, ]
d
table(samples(d)$group)
d <- dmFilter(d, min_samps_gene_expr = 7, min_samps_feature_expr = 3,
min_gene_expr = 10, min_feature_expr = 10)
design_full <- model.matrix(~ group, data = samples(d))
design_full
set.seed(123)
## Calculate precision
d <- dmPrecision(d, design = design_full)
dev.off()
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_ctrl.RData")
View(input.scores)
length(which(input.scores$pval<=0.05))
input.scores$id[which(input.scores$pval<=0.05)]
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_kd.RData")
input.scores$id[which(input.scores$pval<=0.05)]
rm(list = ls())
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_ctrl.RData")
tf1 <- input.scores$id[which(input.scores$pval<=0.05)]
tf1
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_kd.RData")
tf2 <- input.scores$id[which(input.scores$pval<=0.05)]
tf2
length(unique(intersect(x = tf1, y = tf2)))/length(unique(c(tf1, tf2)))
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_ctrl.RData")
tf1 <- input.scores$id[which(input.scores$pval<=0.1)]
tf1
load(file = "~/Downloads/Validation_Analysis_rMATS/Gene_Expression/output/tf_act_ccar1_hepg2_kd.RData")
tf2 <- input.scores$id[which(input.scores$pval<=0.05)]
tf2
tf2 <- input.scores$id[which(input.scores$pval<=0.1)]
tf2
length(unique(intersect(x = tf1, y = tf2)))/length(unique(c(tf1, tf2)))
df <- data.frame(date=c("2017-01-01","2017-01-02", "2017-01-03", "2017-01-04", "2017-01-05"), X1=c("A", "B", "C", "D", "F"),
X2=c("B", "A", "D", "F", "C"))
df2 <- data.frame(date=c("2017-01-01","2017-01-02", "2017-01-03", "2017-01-04", "2017-01-05"),
A=c("3", "4", "2", "1", "5"),
B=c("6", "2", "5", "1", "1"),
C=c("1", "4", "5", "2", "3"),
D=c("67", "67", "63", "61", "62"),
F=c("31", "33", "35", "31", "38"))
View(df)
View(df2)
library("XML")
rm(list = ls())
result <- xmlParse(file = "/home/enio/Downloads/hsa04010.xml")
print(result)
rootnode <- xmlRoot(result)
rootnode
print(rootnode[1])
print(rootnode[2])
print(rootnode[3])
print(rootnode[4])
length(rootnode)
rootnode$relation
print(rootnode$relation)
result
"ccar1"  "cstf2t" "gtf2f1" "hnrnpd" "rbm17"  "sf1"    "srsf3"
"cpsf7"    "fip1l1"   "gtf2f1"   "hnrnpa0"  "hnrnpl"   "hnrnpm"   "hnrnpul1" "pabpn1"   "papola"   "ppil4"    "sf1"
[12] "snrnp200" "srsf7"
install.packages("refmans")
install.packages("adimpro")
library(adimpro)
vignette("adimpro")
read.image("/home/enio/Downloads/test_img.jpeg", compress=TRUE)
read.image(filename = "/home/enio/Downloads/test_img.jpeg", compress=TRUE)
read.image(filename = "/home/enio/Downloads/test_img.jpeg", compress=TRUE)
setwd("/home/enio/Downloads/DoRothEA_CD/")
network_hnrnpk <- read.delim("~/Downloads/domain_centric_networks/hepg2/network_hnrnpk.txt")
View(network_hnrnpk)
net1 <- network_hnrnpk
rm(network_hnrnpk)
combined_networks_hnrnpk <- read.delim("~/Downloads/combined_networks_comb/combined_networks_hnrnpk.txt")
View(combined_networks_hnrnpk)
View(net1)
net2 <- combined_networks_hnrnpk
rm(combined_networks_hnrnpk)
View(net1)
kk1 <- net1[which(net1[, 4]=="spliced"), ]
kk2 <- net2[which(net2[, 4]=="spliced"), ]
View(kk1)
View(kk2)
reac1 <- paste0(kk1[, 1], "=", kk1[, 2])
reac2 <- paste0(kk2[, 1], "=", kk2[, 2])
setdiff(x = reac1, y = reac2)
setdiff(x = reac2, y = reac1)
View(net1)
View(net2)
load(file = system.file("extdata", "digger_human_exons.RData", package = "LINDA"))
View(bg)
network_hnrnpk <- read.delim("~/Downloads/domain_centric_networks/hepg2/network_hnrnpk.txt")
View(network_hnrnpk)
net1 <- network_hnrnpk
rm(network_hnrnpk)
combined_networks_hnrnpk <- read.delim("~/Downloads/combined_networks_comb/combined_networks_hnrnpk.txt")
View(combined_networks_hnrnpk)
net2 <- combined_networks_hnrnpk
rm(combined_networks_hnrnpk)
View(net1)
View(net2)
temp1 <- net1[, c(1:2, 4:6)]
temp2 <- net2[, c(1:2, 4:6)]
View(temp1)
View(temp2)
write.table(x = temp1, file = "/home/enio/Downloads/hnrnpk_prev.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
write.table(x = temp2, file = "/home/enio/Downloads/hnrnpk_curr.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
load(file = "/home/enio/Downloads/LINDA_Example-main/LINDA_Analysis/output/res_ctrl.RData")
kk <- res_ctrl$combined_interactions
View(kk)
setwd("/home/enio/Documents/GitHub/LINDA_Example/Transcript_Expression/")
list.files(path = "output/")
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
dir.create("output")
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd.txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88002/matrix/GSE88002_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_ctrl.txt"))
temp_kd <- read.table(file = paste0("temp_kd.txt"), sep = " ")
temp_ctrl <- read.table(file = paste0("temp_ctrl.txt"), sep = " ")
# Download KD
experiments <- temp_kd$V1[which(grepl(pattern = "transcript_quantifications_GRCh38.tsv.gz", x = temp_kd$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "transcript_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("kd", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Download Ctrl
experiments <- temp_ctrl$V1[which(grepl(pattern = "transcript_quantifications_GRCh38.tsv.gz", x = temp_ctrl$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "transcript_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("ctrl", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Build FPKM data matrix
kd1 <- read.table(file = paste0("kd1.tsv"), header = TRUE)
kd2 <- read.table(file = paste0("kd2.tsv"), header = TRUE)
ctrl1 <- read.table(file = paste0("ctrl1.tsv"), header = TRUE)
ctrl2 <- read.table(file = paste0("ctrl2.tsv"), header = TRUE)
commonTranscripts <- intersect(x = intersect(x = kd1$transcript_id,
y = kd2$transcript_id),
y = intersect(x = ctrl1$transcript_id,
y = ctrl2$transcript_id))
kd1 <- kd1[which(kd1$transcript_id%in%commonTranscripts), ]
kd2 <- kd2[which(kd2$transcript_id%in%commonTranscripts), ]
ctrl1 <- ctrl1[which(ctrl1$transcript_id%in%commonTranscripts), ]
ctrl2 <- ctrl2[which(ctrl2$transcript_id%in%commonTranscripts), ]
kd1 <- kd1[order(kd1$transcript_id), ]
kd2 <- kd2[order(kd2$transcript_id), ]
ctrl1 <- ctrl1[order(ctrl1$transcript_id), ]
ctrl2 <- ctrl2[order(ctrl2$transcript_id), ]
idx2rem <- which(duplicated(kd1$transcript_id)); if(length(idx2rem)>0){kd1 <- kd1[-idx2rem, ]}
idx2rem <- which(duplicated(kd2$transcript_id)); if(length(idx2rem)>0){kd2 <- kd2[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl1$transcript_id)); if(length(idx2rem)>0){ctrl1 <- ctrl1[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl2$transcript_id)); if(length(idx2rem)>0){ctrl2 <- ctrl2[-idx2rem, ]}
df <- matrix(data = , nrow = nrow(kd1), ncol = 4)
df <- matrix(data = , nrow = nrow(kd1), ncol = 4)
df[, 1] <- kd1$expected_count
df[, 2] <- kd2$expected_count
df[, 3] <- ctrl1$expected_count
df[, 4] <- ctrl2$expected_count
df <- as.data.frame(df)
rownames(df) <- sapply(strsplit(x = kd1$transcript_id, split = ".", fixed = TRUE), '[', 1)
colnames(df) <- c(paste0("kd_", 1:2), paste0("ctrl_", 1:2))
df <- df[complete.cases(df), ]
# Do differential gene expression analysis
conditions<-factor(c("ko", "ko", "ctrl", "ctrl"))
design <- model.matrix(~ conditions)
y <- DGEList(counts=df, group=conditions)
keep <- filterByExpr(y, group=conditions)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateGLMCommonDisp(y, design, verbose=TRUE)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmQLFit(y,design,robust=TRUE)
res=glmQLFTest(fit, coef=2)
ttop=as.data.frame(topTags(res,n=nrow(df)))
ttop$ID <- rownames(ttop)
save(ttop, file = "output/ttop_u2af1_hepg2.RData")
splice_effect <- ttop[, c(6, 1, 5)]
colnames(splice_effect) <- c("id", "effect", "significance")
save(splice_effect, file = "output/splice_effect_u2af1_hepg2.RData")
View(splice_effect)
kk <- splice_effect
View(splice_effect)
getwd()
rm(list = ls())
#! /usr/bin/env Rscript
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
dir.create("output")
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88226/matrix/GSE88226_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_kd.txt"))
download.file(url = "https://ftp.ncbi.nlm.nih.gov/geo/series/GSE88nnn/GSE88002/matrix/GSE88002_series_matrix.txt.gz",
destfile = paste0(getwd(), "/temp_ctrl.txt"))
temp_kd <- read.table(file = paste0("temp_kd.txt"), sep = " ")
temp_ctrl <- read.table(file = paste0("temp_ctrl.txt"), sep = " ")
# Download KD
experiments <- temp_kd$V1[which(grepl(pattern = "transcript_quantifications_GRCh38.tsv.gz", x = temp_kd$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "transcript_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("kd", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Download Ctrl
experiments <- temp_ctrl$V1[which(grepl(pattern = "transcript_quantifications_GRCh38.tsv.gz", x = temp_ctrl$V1, fixed = TRUE))]
experiments <- gsub(pattern = "\t", replacement = " ", x = experiments)
experiments <- unlist(x = strsplit(x = experiments, split = " ", fixed = TRUE))
experiments <- experiments[which(grepl(pattern = ".tsv", x = experiments, fixed = TRUE))]
experiments <- experiments[which(grepl(pattern = "GRCh38", x = experiments, fixed = TRUE))]
cnt <- 1
for(jj in 1:length(experiments)){
if(grepl(pattern = "transcript_quantifications", x = experiments[jj])){
download.file(url = experiments[jj], destfile = paste0(getwd(), "/temp.tsv"))
temp <- read_tsv(file = paste0(getwd(), "/temp.tsv"))
if("gene_id"%in%colnames(temp)){
write_tsv(x = temp, file = paste0("ctrl", cnt, ".tsv"))
cnt <- cnt + 1
}
file.remove(paste0(getwd(), "/temp.tsv"))
}
}
# Build FPKM data matrix
kd1 <- read.table(file = paste0("kd1.tsv"), header = TRUE)
kd2 <- read.table(file = paste0("kd2.tsv"), header = TRUE)
ctrl1 <- read.table(file = paste0("ctrl1.tsv"), header = TRUE)
ctrl2 <- read.table(file = paste0("ctrl2.tsv"), header = TRUE)
commonTranscripts <- intersect(x = intersect(x = kd1$transcript_id,
y = kd2$transcript_id),
y = intersect(x = ctrl1$transcript_id,
y = ctrl2$transcript_id))
kd1 <- kd1[which(kd1$transcript_id%in%commonTranscripts), ]
kd2 <- kd2[which(kd2$transcript_id%in%commonTranscripts), ]
ctrl1 <- ctrl1[which(ctrl1$transcript_id%in%commonTranscripts), ]
ctrl2 <- ctrl2[which(ctrl2$transcript_id%in%commonTranscripts), ]
kd1 <- kd1[order(kd1$transcript_id), ]
kd2 <- kd2[order(kd2$transcript_id), ]
ctrl1 <- ctrl1[order(ctrl1$transcript_id), ]
ctrl2 <- ctrl2[order(ctrl2$transcript_id), ]
idx2rem <- which(duplicated(kd1$transcript_id)); if(length(idx2rem)>0){kd1 <- kd1[-idx2rem, ]}
idx2rem <- which(duplicated(kd2$transcript_id)); if(length(idx2rem)>0){kd2 <- kd2[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl1$transcript_id)); if(length(idx2rem)>0){ctrl1 <- ctrl1[-idx2rem, ]}
idx2rem <- which(duplicated(ctrl2$transcript_id)); if(length(idx2rem)>0){ctrl2 <- ctrl2[-idx2rem, ]}
df <- matrix(data = , nrow = nrow(kd1), ncol = 4)
df[, 1] <- kd1$expected_count
df[, 2] <- kd2$expected_count
df[, 3] <- ctrl1$expected_count
df[, 4] <- ctrl2$expected_count
df <- as.data.frame(df)
rownames(df) <- sapply(strsplit(x = kd1$transcript_id, split = ".", fixed = TRUE), '[', 1)
colnames(df) <- c(paste0("kd_", 1:2), paste0("ctrl_", 1:2))
df <- df[complete.cases(df), ]
# Do differential gene expression analysis
conditions<-factor(c("ko", "ko", "ctrl", "ctrl"))
design <- model.matrix(~ conditions)
y <- DGEList(counts=df, group=conditions)
keep <- filterByExpr(y, group=conditions)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateGLMCommonDisp(y, design, verbose=TRUE)
y <- estimateGLMTagwiseDisp(y, design)
fit <- glmQLFit(y,design,robust=TRUE)
res=glmQLFTest(fit, coef=2)
ttop=as.data.frame(topTags(res,n=nrow(df)))
ttop$ID <- rownames(ttop)
save(ttop, file = "output/ttop_u2af1_hepg2.RData")
splice_effect <- ttop[, c(6, 1, 5)]
colnames(splice_effect) <- c("id", "effect", "significance")
save(splice_effect, file = "output/splice_effect_u2af1_hepg2.RData")
View(splice_effect)
View(splice_effect)
getwd()
rm(list = ls())
setwd("/home/enio/Documents/GitHub/LINDA_Example/Gene_Expression/")
set.seed(1234)
library("readr")
library("org.Hs.eg.db")
library("biomaRt")
library("stringr")
library("dplyr")
library("edgeR")
library("dorothea")
library("foreach")
library("doParallel")
library("piano")
library("BiRewire")
mart=useMart(biomart="ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="apr2019.archive.ensembl.org")
ensg2symbol=getBM(attributes=c("ensembl_gene_id","external_gene_name"), mart=mart)
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C","D","E"))
load(file = "output/ttop_u2af1_hepg2.RData")
View(ttop)
stats <- ttop$logFC
names(stats) <- ttop$ID
expr = as.matrix(stats)
tf_activities_stat <- dorothea::run_viper(expr, regulons,
options =  list(minsize = 3, eset.filter = FALSE,
cores = 1, verbose = FALSE, nes = TRUE))
tf_activities_stat <- as.data.frame(tf_activities_stat)
input.scores <- matrix(data = , nrow = nrow(tf_activities_stat), ncol = 2)
input.scores[, 1] <- rownames(tf_activities_stat)
input.scores[, 2] <- tf_activities_stat[, 1]
colnames(input.scores) <- c("id", "nes")
input.scores <- as.data.frame(input.scores)
input.scores$id <- as.character(input.scores$id)
input.scores$nes <- as.numeric(input.scores$nes)
sif <- matrix(data = "+", nrow = nrow(regulons), ncol = 3)
sif[, 1] <- regulons$tf
sif[which(regulons$mor==-1), 2] <- "-"
sif[, 3] <- regulons$target
random_scores <- matrix(data = , nrow = nrow(input.scores), ncol = nperm)
nperm <- 1000
random_scores <- matrix(data = , nrow = nrow(input.scores), ncol = nperm)
rownames(random_scores) <- input.scores$id[order(input.scores$id)]
colnames(random_scores) <- paste0("perm_", 1:nperm)
ii <- 1
model.dsg <- birewire.induced.bipartite(sif, delimitators = list(negative="-", positive="+"))
tmp <- birewire.rewire.dsg(model.dsg, verbose = FALSE, delimitators = list(negative="-", positive="+"))
idx <- which(x = tmp$positive==1, arr.ind = TRUE)
randomPos <- matrix(data = , nrow = nrow(idx), ncol = 4)
randomPos[, 1] <- rownames(tmp$positive)[idx[, 1]]
randomPos[, 2] <- "A"
randomPos[, 3] <- colnames(tmp$positive)[idx[, 2]]
randomPos[, 4] <- "1"
idx <- which(x = tmp$negative==1, arr.ind = TRUE)
randomNeg <- matrix(data = , nrow = nrow(idx), ncol = 4)
randomNeg[, 1] <- rownames(tmp$positive)[idx[, 1]]
randomNeg[, 2] <- "A"
randomNeg[, 3] <- colnames(tmp$positive)[idx[, 2]]
randomNeg[, 4] <- "-1"
random <- unique(rbind(randomPos, randomNeg))
colnames(random) <- colnames(regulons)
random <- as.data.frame(random)
random$mor <- as.numeric(random$mor)
tf <- dorothea::run_viper(expr, random,
options =  list(minsize = 3, eset.filter = FALSE,
cores = 1, verbose = FALSE, nes = TRUE))
random_scores[which(rownames(random_scores)%in%intersect(x = rownames(random_scores), y = rownames(tf))), ii] <-
as.numeric(tf)[which(rownames(tf)%in%intersect(x = rownames(random_scores), y = rownames(tf)))]
View(random_scores)
ind <- apply(random_scores, 1, function(x) all(is.na(x)))
random_scores <- random_scores[!ind, ]
input.scores <- input.scores[which(input.scores$id%in%rownames(random_scores)), ]
significance <- rep(1, nrow(input.scores))
View(tf_activities_stat)
